CREATE DATABASE NETFLIX

USE NETFLIX

SELECT * FROM NETFLIX_MOVIES
SELECT * FROM NETFLIX_SUBSCRIPTIONS
SELECT * FROM NETFLIX_REVIEWS
SELECT * FROM NETFLIX_WATCH_HISTORY
SELECT * FROM NETFLIX_USERS


--Q1 1.	Retrieve the most-watched movies (without LIMIT)

SELECT MOVIE_ID,COUNT(*) AS MOST_WATCH_MOVIE FROM NETFLIX_MOVIES
GROUP BY MOVIE_ID
ORDER BY  MOST_WATCH_MOVIE DESC


--Q2 2.	Find the most popular movie genre based on watch history

SELECT GENRE,COUNT(USER_ID) AS TOT_VIEWS
FROM NETFLIX_MOVIES A
JOIN NETFLIX_WATCH_HISTORY B 
ON A.MOVIE_ID =B.MOVIE_ID
GROUP BY GENRE
ORDER BY TOT_VIEWS DESC

--Q3 3.	Identify users who watched at least 5 different movies

SELECT USER_ID,COUNT(DISTINCT A.MOVIE_ID) AS UNIQUE_MOVIE
FROM NETFLIX_MOVIES A
JOIN NETFLIX_WATCH_HISTORY B
ON A.MOVIE_ID =B.MOVIE_ID
GROUP BY USER_ID
HAVING COUNT(DISTINCT A.MOVIE_ID) >=5

--Q4 4.	Rank Movies by Watch Count Within Each Genre
WITH CTE AS (
SELECT GENRE,A.MOVIE_ID,TITLE,COUNT(USER_ID) AS USER_WATCH_COUNT FROM 
NETFLIX_MOVIES A
JOIN NETFLIX_WATCH_HISTORY B
ON A.MOVIE_ID =B.MOVIE_ID
GROUP BY GENRE,A.MOVIE_ID,TITLE
)

SELECT GENRE,MOVIE_ID,TITLE,USER_WATCH_COUNT FROM (
SELECT *,DENSE_RANK() OVER (PARTITION BY GENRE ORDER BY USER_WATCH_COUNT) AS RN
FROM CTE
)A

--Q5 5.	Find Users Who Rated the Most Movies

SELECT COUNT(REVIEW_ID) AS TOT_REVIEW,USER_ID,DENSE_RANK() OVER (PARTITION BY USER_ID ORDER BY COUNT(REVIEW_ID)) AS RN
FROM NETFLIX_REVIEWS
GROUP BY USER_ID

--6.	Retrieve the First Movie Each User Watched
WITH CTE AS (
SELECT USER_ID,MOVIE_ID,WATCH_TIME_MINS AS WATCH_TIME ,
DENSE_RANK() OVER (PARTITION BY USER_ID ORDER BY WATCH_TIME_MINS) AS RN
FROM NETFLIX_WATCH_HISTORY
)

SELECT * FROM CTE WHERE RN =1

--7.	Identify Users Who Watched at Least 1 Movies in a Day

SELECT USER_ID,WATCH_DATE,COUNT(MOVIE_ID) AS MOVIE_ID_COUNT
FROM NETFLIX_WATCH_HISTORY
GROUP BY USER_ID,WATCH_DATE
HAVING COUNT(MOVIE_ID) >=1

--8.	Rank Users by Total Watch Time
WITH CTE AS (
SELECT USER_ID,B.MOVIE_ID,SUM(WATCH_TIME_MINS) AS TOT_WATCH_TIME_MINS
FROM NETFLIX_WATCH_HISTORY A
JOIN NETFLIX_MOVIES B
ON A.MOVIE_ID =B.MOVIE_ID
GROUP BY USER_ID,B.MOVIE_ID
)
SELECT USER_ID,MOVIE_ID,TOT_WATCH_TIME_MINS FROM (
SELECT *,DENSE_RANK() OVER (ORDER BY TOT_WATCH_TIME_MINS DESC) AS RN
FROM CTE
)A

--9 	Identify the Most-Watched Genre Per User
WITH CTE AS (
SELECT GENRE,WATCH_ID,USER_ID ,SUM(WATCH_TIME_MINS) AS WATCH_TIME_MINS,A.MOVIE_ID  FROM NETFLIX_MOVIES A
JOIN NETFLIX_WATCH_HISTORY B
ON A.MOVIE_ID =B.MOVIE_ID
GROUP BY GENRE,WATCH_ID,USER_ID,A.MOVIE_ID 
)
SELECT GENRE,WATCH_TIME_MINS,USER_ID FROM (
SELECT *,ROW_NUMBER() OVER (PARTITION BY GENRE ORDER BY WATCH_TIME_MINS DESC) AS RN
FROM CTE 
)A
WHERE RN =1

--10.	Find the Most Recent Review for Each Movie
WITH CTE AS (
SELECT A.MOVIE_ID,USER_ID,REVIEW_ID,REVIEW_DATE AS REVIEW_DATE_UPDATED,REVIEW_TEXT
FROM NETFLIX_MOVIES A
JOIN NETFLIX_REVIEWS B
ON A.MOVIE_ID =B.MOVIE_ID
)
SELECT MOVIE_ID,REVIEW_DATE_UPDATED,USER_ID,REVIEW_TEXT FROM (
SELECT MOVIE_ID,REVIEW_DATE_UPDATED,USER_ID,REVIEW_TEXT,
ROW_NUMBER() OVER (PARTITION BY MOVIE_ID ORDER BY REVIEW_DATE_UPDATED) AS RK
FROM CTE )A WHERE RK =1


--Netflix Hard Questions
--1.	Find users who downgraded their subscription plan

SELECT USER_ID,PLAN_TYPE,START_DATE,
LAG(PLAN_TYPE,1)OVER (PARTITION BY USER_ID ORDER BY START_DATE) AS PREVIOUS_PLAN
FROM NETFLIX_SUBSCRIPTIONS.

--2.	Identify binge-watchers (Users who watched at least 3 movies in a row within a short time)
WITH CTE AS (
SELECT USER_ID,WATCH_TIME_MINS,
LEAD(WATCH_TIME_MINS,1) OVER (PARTITION BY USER_ID ORDER BY WATCH_TIME_MINS) AS NEXT_WATCH_TIME_MINS,
LEAD(WATCH_TIME_MINS,2) OVER (PARTITION BY USER_ID ORDER BY WATCH_TIME_MINS) AS SECOND_WATCH_TIME_MINS,
LEAD(WATCH_TIME_MINS,3) OVER (PARTITION BY USER_ID ORDER BY WATCH_TIME_MINS) AS THIRD_WATCH_TIME_MINS
FROM NETFLIX_WATCH_HISTORY
)

SELECT * FROM CTE WHERE DATEDIFF(HOUR,WATCH_TIME_MINS,NEXT_WATCH_TIME_MINS)<=3
AND DATEDIFF(HOUR,SECOND_WATCH_TIME_MINS,THIRD_WATCH_TIME_MINS) <=3

--3.	Track rating trends for a specific movie over time

WITH CTE AS (
    SELECT 
        REVIEW_ID,
        MOVIE_ID,
        CAST(RATING AS FLOAT) AS CURRENT_RATING,
        USER_ID,
        LAG(CAST(RATING AS FLOAT), 1) OVER (PARTITION BY MOVIE_ID ORDER BY REVIEW_DATE) AS PREVIOUS_RATING
    FROM NETFLIX_REVIEWS
)
SELECT *,
       (CURRENT_RATING - PREVIOUS_RATING) AS CHG
FROM CTE;

--4.	Identify users who switched genres frequently

WITH CTE AS (
SELECT USER_ID,GENRE ,watch_time_mins,LAG(GENRE,1)OVER (PARTITION BY USER_ID ORDER BY watch_time_mins) AS PREVIOUS_GENRE
FROM 
(
SELECT USER_ID,GENRE,watch_time_mins
FROM NETFLIX_MOVIES A
JOIN NETFLIX_WATCH_HISTORY B 
ON A.MOVIE_ID =B.MOVIE_ID
)A
)


SELECT * FROM CTE  WHERE  GENRE <> PREVIOUS_GENRE












